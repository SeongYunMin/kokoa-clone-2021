.nav {
  position: fixed;
  bottom: 0px;
  width: 100%;
  /* navigation bar는 스크롤을 해도 화면 하단에 그대로 있어야 한다
    따라서 position속성을 fixed로 줘서 가만히 있게 하고 bottom 0px로
    창의 맨 아래에 위치하게 했다 이것만 하면 nav 박스의 width이 사라져
    버린다. 따라서 width에 100%를 먹여주면 끝!! 인줄 알았는데 이렇게 하면
    ellipsis icon이 사라진다 WHY?? 패딩이 좌우로 50씩 있기 때문
    이거는 바로 아래에서 배울 box-sizing 속성을 통해 해결 가능하다 */
  background-color: #f9f9fa;
  padding: 18px 50px;
  box-sizing: border-box;
  border-top: 1px solid rgba(0, 0, 0, 0.1);
}
/* 우선 알아야 할게 있다. 예를들어 width 200px짜리 박스를 만들었다고 치자
      그리고 padding-left를 50px을 주었다 그러면 상식적으로 width 200px 중 
      왼쪽 50px이 패딩이 되고 나머지 150px만 쓸 수 있을 것 같지 않냐? 근데
      CSS는 프로그래머의 오더 대로 200px쓸 수 있는 공간을 만들기 위해 박스
      오른쪽을 50px 늘려버린다. 그러면 쓸 수 있는 공간은 200px이 되지만 박스
      자체는 width를 250px 가지게 되는 것이다 즉 박스 자체를 키워버린다
      이 .nav에 속성을 먹일때 우리는 먼저 width를 스크린 폭의 100%를 줬다
      그리고 패딩을 좌우로 50px씩 줬다 그러므로 박스 자체가 스크린 폭 보다
      커져서 ellipsis가 화면 바깥쪽으로 나가버린 것
      따라서 우리는 여기서 새로 나오는 box-sizing: border-box; 속성을 먹이게 된다
      이 속성은 패딩을 50만큼 주면 박스 사이즈를 50만큼 늘려버리는 CSS에게
      "얘 이번에는 박스 사이즈 늘리지 마! 이번에는 그냥 박스 너비는 유지한 채로
        패딩만 먹여줘" 라는 명령을 내리는 역할을 한다
      결국 박스 폭은 스크린 폭 100%로 맞춰지고 원하는 모습이 나오게 되는것이다*/

.nav__list {
  display: flex;
  justify-content: space-between;
}
/*  이렇게 해서 navigation bar의 아이콘들 나란히 있게 하자 */

/*
.nav__link{
    color: inherit;
    text-decoration: none;
}
이렇게 nav__link의 디폴트 값을 없앨 수 있지만 이 속성은 모든 링크에 다 적용되므로
reset.css에 가서 아얘 a에다가 디폴트값을 다 없애는 속성을 먹여버리자 */
.nav__link {
  color: #2f363e;
}
.fa-comment {
  position: relative;
}
@keyframes notification_animation {
  0% {
    transform: none;
  }
  50% {
    transform: translateY(-5px) rotateY(360deg);
  }
  100% {
    transform: none;
  }
}
.nav__notification {
  display: flex;
  /* 이렇게 flex box로 만들면 인라인인 span이 block이 된다 */
  justify-content: center;
  align-items: center;
  position: absolute;
  left: 18px;
  bottom: 18px;
  /* 이 알림표시를 항상 message 아이콘 바로 위에 오게 하기위해 이 알림 엘레먼트의
    포지션을 absolute로 잡고 html 상에서 이 엘레먼트의 부모 엘레먼트인 .fa-comment
    의 포지션을 relative로 설정하여 창 크기 변해도 알림은 메시지 아이콘 위에 항상
    머물도록 짜보자*/
  animation: notification_animation 1.5s ease-in-out infinite;
}

.nav__notification--small {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: #ff6229;
  position: absolute;
  right: 43px;
  bottom: 40px;
}

@keyframes appearBtnAnimation {
  from {
    opacity: 0;
    transform: translateY(80px);
  }
  to {
    opacity: 1;
    transform: none;
  }
}

.nav__btn {
  transform: translateY(80px);

  /* 이렇게 애니메이션의 from속성(초기값)과 동일한 속성을 줘야 처음부터 
  버튼들이 숨은채로 등장해서 잔상이 남지 않고 어색하지 않다 
  이렇게 해야 하는 이유
  내가 naw_btn 엘레먼트에 각각 다른 delay를 줬기 때문에 그 지연시간 동안
  nav_btn 들은 초기 속성을 유지하고 있다 따라서 어색해지게 된다*/
  animation: appearBtnAnimation 0.5s ease-in-out forwards;
}

.nav__btn:nth-child(2) {
  animation-delay: 0.25s;
}
.nav__btn:nth-child(3) {
  animation-delay: 0.5s;
}
.nav__btn:last-child {
  animation-delay: 0.75s;
}
